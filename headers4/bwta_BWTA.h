/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class bwta_BWTA */

#ifndef _Included_bwta_BWTA
#define _Included_bwta_BWTA
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     bwta_BWTA
 * Method:    readMap
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_bwta_BWTA_readMap
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    analyze
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_bwta_BWTA_analyze
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    computeDistanceTransform
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_bwta_BWTA_computeDistanceTransform
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    balanceAnalysis
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_bwta_BWTA_balanceAnalysis
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getMaxDistanceTransform
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_bwta_BWTA_getMaxDistanceTransform
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getRegions
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getRegions
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getChokepoints
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getChokepoints
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getBaseLocations
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getBaseLocations
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getStartLocations
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getStartLocations
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getUnwalkablePolygons
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getUnwalkablePolygons
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getStartLocation
 * Signature: (Lbwapi/Player;)Lbwta/BaseLocation;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getStartLocation
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getRegion
 * Signature: (II)Lbwta/Region;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getRegion__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     bwta_BWTA
 * Method:    getRegion
 * Signature: (Lbwapi/TilePosition;)Lbwta/Region;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getRegion__Lbwapi_TilePosition_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getRegion
 * Signature: (Lbwapi/Position;)Lbwta/Region;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getRegion__Lbwapi_Position_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestChokepoint
 * Signature: (II)Lbwta/Chokepoint;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestChokepoint__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestChokepoint
 * Signature: (Lbwapi/TilePosition;)Lbwta/Chokepoint;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestChokepoint__Lbwapi_TilePosition_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestChokepoint
 * Signature: (Lbwapi/Position;)Lbwta/Chokepoint;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestChokepoint__Lbwapi_Position_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestBaseLocation
 * Signature: (II)Lbwta/BaseLocation;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestBaseLocation__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestBaseLocation
 * Signature: (Lbwapi/TilePosition;)Lbwta/BaseLocation;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestBaseLocation__Lbwapi_TilePosition_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestBaseLocation
 * Signature: (Lbwapi/Position;)Lbwta/BaseLocation;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestBaseLocation__Lbwapi_Position_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestUnwalkablePolygon
 * Signature: (II)Lbwta/Polygon;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestUnwalkablePolygon__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestUnwalkablePolygon
 * Signature: (Lbwapi/TilePosition;)Lbwta/Polygon;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestUnwalkablePolygon__Lbwapi_TilePosition_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getNearestUnwalkablePosition
 * Signature: (Lbwapi/Position;)Lbwapi/Position;
 */
JNIEXPORT jobject JNICALL Java_bwta_BWTA_getNearestUnwalkablePosition
  (JNIEnv *, jclass, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    isConnected
 * Signature: (IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_bwta_BWTA_isConnected__IIII
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     bwta_BWTA
 * Method:    isConnected
 * Signature: (Lbwapi/TilePosition;Lbwapi/TilePosition;)Z
 */
JNIEXPORT jboolean JNICALL Java_bwta_BWTA_isConnected__Lbwapi_TilePosition_2Lbwapi_TilePosition_2
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    getGroundDistance
 * Signature: (Lbwapi/TilePosition;Lbwapi/TilePosition;)D
 */
JNIEXPORT jdouble JNICALL Java_bwta_BWTA_getGroundDistance
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     bwta_BWTA
 * Method:    buildChokeNodes
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_bwta_BWTA_buildChokeNodes
  (JNIEnv *, jclass);

/*
 * Class:     bwta_BWTA
 * Method:    getGroundDistance2
 * Signature: (Lbwapi/TilePosition;Lbwapi/TilePosition;)I
 */
JNIEXPORT jint JNICALL Java_bwta_BWTA_getGroundDistance2
  (JNIEnv *, jclass, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
